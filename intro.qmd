# Introduction to recurrence plots {#sec-introduction}

This chapter introduces what a recurrence plot is and explains how it
can be analyzed using the most common measures that quantify features of
the recurrence plot [@zbilut1992]. We will use some relatively simple
examples, so that the basic concepts are not obscured by complications
arising from more realistic data. We will deal with those issues in due
time, but see @marwan2007 for a comprehensive introduction to recurrence
plots with all the mathematical details.

Now, let us explore what a recurrence plot is.

## A simple example

We start with the children's rhyme by Helen H. Moore, shown below, to
explore what recurrence in a time series is --- exemplified here by the
text, where each letter is a datum and time is represented by the
position of the letter in the text.

```{r}
#| echo: false

popcorn_text <- "Pop, pop, popcorn
Popping in the pot!
Pop, pop, popcorn
Eat it while it's hot!
Pop, pop, popcorn
Butter on the top!
When I eat popcorn
I can't stop"

cat(popcorn_text)
```

```{r}
#| echo: false

library(stringr)

popcorn_raw <- gsub("\\n", " ", popcorn_text)
# TODO: Also remove space, comma, period, etc.?

# Remove all newlines and punctuation and convert to upper case
popcorn_raw <- popcorn_text |>
  str_replace_all(pattern = "\\n", replacement = " ") |>
  str_replace_all(pattern = "\\.", replacement = "") |>
  str_replace_all(pattern = "[!?,']", replacement = "") |>
  # str_replace_all(pattern = " ", replacement = "␣") |>  # Recode space as ␣
  str_to_upper()

empty_space <- "␣"
popcorn <- unlist(strsplit(popcorn_raw, ""))
```

The letters of the rhyme are encoded in the variable `popcorn` and we
can the use the `crqa()` function from the package of the same name
[@coco2021] to create the recurrence plot.

The first 30 elements of the `popcorn` vector are:
`{r} popcorn[1:30] |> str_replace_all(pattern = " ", replacement = "␣")`.
Here the character "`{r} empty_space`" represents a space between words.
Line breaks and punctuation marks have been removed from the poem, and
all letters are upper case, since we do not want to distinguish between
lower case and upper case letters.

The R code shown below will compute and display the recurrence plot.

```{r}
#| warning: false
#| fig-cap: Recurrence plot of poem


library(crqa)
# We could create a package, NLM, instead
source("R/utils.R")

rp <- crqa(popcorn, popcorn,
           delay = 0,
           embed = 0,
           radius = 0.1,
           method = "rqa",
           datatype = "categorical")

plot_rp(rp$RP)
```

We can also look at the first two verses of the poem, and put the
letters on the axes, to make it a little easier to see how the
underlying time series results in a recurrence plot.

```{r}
#| echo: false
#| warning: false
#| fig-cap: Recurrence plot of first two verses of the poem

# N_plot <- length(popcorn_ts) # For the whole poem
N_plot <- 34

rp <- crqa(popcorn[1:N_plot], popcorn[1:N_plot],
           delay = 0,
           embed = 0,
           radius = 0.1,
           method = "rqa",
           datatype = "categorical")

plot_rp(rp$RP) +
  scale_x_continuous(breaks = 1:N_plot, labels = popcorn[1:N_plot]) +
  scale_y_continuous(breaks = 1:N_plot, labels = popcorn[1:N_plot]) +
  theme(axis.text.y = element_text(angle = 90, hjust = 0.5))
```

## Quantifying the recurrence plot

```{r}
#| echo: false
find_pattern <- "POP POP POPCORN"
```

With some training you can learn how to spot various properties of a
time series simply by looking at the corresponding recurrence plot. In
the case of the poem, we can see, for instance, that certain motifs are
repeated in the poem. This is evident from the blue diagonal lines in
the figure below, which correspond to the recurring motif
"`{r} find_pattern`".

```{r}
#| echo: false
#| warning: false
#| fig-cap: Recurring motifs in the poem


# TODO: Turn this into a utility function, e.g., highlight_motif(RP, ts)
# TODO: Other functions, such as highlighting the longest line(s)  might
# also be useful.

rp <- crqa(popcorn, popcorn,
           delay = 0,
           embed = 0,
           radius = 0.1,
           method = "rqa",
           datatype = "categorical")

data_df <- as.data.frame.table(as.matrix(rp$RP), responseName = "value") %>%
  mutate(value = as.logical(value)) %>% 
  filter(value == TRUE) %>% 
  mutate_if(is.factor, as.integer)


# Get a list with the matrix of start end positions
pattern_positions <- str_locate_all(popcorn_raw, find_pattern)
# Create a data frame which marks all the positions between each
# start, end pair.
pattern_locations <- data.frame()
for (pos in seq_len(nrow(pattern_positions[[1]]))) {
  locations <- seq(
    pattern_positions[[1]][pos, "start"],
    pattern_positions[[1]][pos, "end"]
  )
  add_locations <- data.frame(
    position = locations,
    pos_in_pattern = seq(1, nchar(find_pattern))
  )
  pattern_locations <- bind_rows(
    pattern_locations,
    add_locations
  )
}

pattern_present <- left_join(data_df,
                             pattern_locations,
                             by = c("Var1" = "position")
) |>
  mutate(pos_in_pattern = if_else(is.na(pos_in_pattern),
                                  0,
                                  pos_in_pattern)) |>
  rename(pos_1 = pos_in_pattern)

pattern_present <- left_join(pattern_present,
                             pattern_locations,
                             by = c("Var2" = "position")
) |>
  mutate(pos_in_pattern = if_else(is.na(pos_in_pattern),
                                  -1,
                                  pos_in_pattern)) |>
  rename(pos_2 = pos_in_pattern)

pattern_present <- pattern_present |>
  mutate(in_pattern = if_else(
    (Var1 %in% pattern_locations$position) & 
      (Var2 %in% pattern_locations$position),
    TRUE,
    FALSE
  )) |>
  mutate(same_pos = (pos_1 == pos_2)) |> 
  mutate(pattern = in_pattern & same_pos)

ggplot(pattern_present, aes(x = Var1, y = Var2, fill = value)) +
  scale_fill_discrete(type = c("0" = "white", "1" = "black")) +
  coord_fixed(ratio = 1) +
  geom_tile() +
  geom_tile(data = pattern_present |> filter(pattern == TRUE),
            color = "blue", fill = "blue") +
  xlab("") +
  ylab("") +
  labs(title = "") +
  expand_limits(x = 1, y = 1) +
  expand_limits(x = dim(as.matrix(rp$RP))[1], y = dim(as.matrix(rp$RP))[2]) +
  theme_classic() +
  theme(legend.position = "none")
```

While we can gain some insights about the underlying time series from a
visual inspection of the recurrence plot, we do not wish to rely on
that. First, simply because we could overlook important features, and
furthermore, it it not feasible for long time series or when comparing
many time series. And, perhaps most importantly, we want *objective*
measures, that do not depend on the skill of the person assessing the
recurrence plot. With that said, it is still very useful to be able to
visually inspect recurrence plots and infer something about the time
series, so we definitely encourage you to work towards developing that
skill as well.

But having objective quantitative measures that characterize features of
a given recurrence plot is what has made recurrence plot analysis an
effective tool, and that is why we will now look at *recurrence
quantification measures*.

Some of the most common recurrence quantification measures are
reproduced in table @tbl-measures, reproduced from @coco2021.

| **Measure**                    | **Abbreviation** | **Definition**                                                                                         |
|------------------|------------------|------------------------------------|
| Recurrence Rate                | RR               | $\displaystyle \frac{1}{N^2} \sum_{i,j=1}^N R_{ij}$                                                    |
| Determinism                    | DET              | $\displaystyle \left. \sum_{l=l_\mathrm{min}}^N lP(l) \middle/ \sum_{l=1}^N lP(l) \right.$             |
| Average Diagonal Line Length   | L                | $\displaystyle \left. \sum_{l=l_\mathrm{min}}^N lP(l) \middle/ \sum_{l=l_\mathrm{min}}^N P(l) \right.$ |
| Maximum Diagonal Line Length   | maxL             | $\displaystyle \max(\{l_i\}_{i=1}^{N_l}), \quad N_l = \sum_{l\geq l_\mathrm{min}} P(l)$                |
| Diagonal Line Entropy          | ENTR             | $\displaystyle - \sum_{l=l_\mathrm{min}}^N p(l)\log p(l)$                                              |
| Laminarity                     | LAM              | $\displaystyle \left. \sum_{v=v_\mathrm{min}}^N vP(v) \middle/ \sum_{v=1}^N vP(v) \right.$             |
| Trapping Time                  | TT               | $\displaystyle \left. \sum_{v=v_\mathrm{min}}^N vP(v) \middle/ \sum_{v=v_\mathrm{min}}^N P(v) \right.$ |
| Categorical Area-based Entropy | catH             | $\displaystyle - \sum_{a>1}^{N_a} p(a)\log p(a)$                                                       |

: Common recurrence quantification measures {#tbl-measures}
