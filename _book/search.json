[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nonlinear Methods Workshop Lecture Notes",
    "section": "",
    "text": "Preface\nThis is a demonstration and test of online lecture notes for an R-based course or workshop. In this case the Nonlinear Methods Workshop held at Leuphana University in Lüneburg.\nThe lecture notes are written in Quarto markdown in Rstudio using the Quarto book document format.\nFor a “normal” page, see 1  Introduction to recurrence plots. For a more advanced example where the user can interact with a live instance of R, see 2  Example of interactivity.\nNote that references are handled nicely, and there is even a PDF version of the lecture notes that can be downloaded.\nThe book is fully searchable, and there is an option for users to annotate both privately and as part of a group (but this is not enabled in the current demonstration).\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction to recurrence plots",
    "section": "",
    "text": "1.1 A simple example\nWe start with the children’s rhyme by Helen H. Moore, shown below, to explore what recurrence in a time series is — exemplified here by the text, where each letter is a datum and time is represented by the position of the letter in the text.\nPop, pop, popcorn\nPopping in the pot!\nPop, pop, popcorn\nEat it while it's hot!\nPop, pop, popcorn\nButter on the top!\nWhen I eat popcorn\nI can't stop\nThe letters of the rhyme are encoded in the variable popcorn and we can the use the crqa() function from the package of the same name (Coco et al. 2021) to create the recurrence plot.\nThe first 30 elements of the popcorn vector are: P, O, P, ␣, P, O, P, ␣, P, O, P, C, O, R, N, ␣, P, O, P, P, I, N, G, ␣, I, N, ␣, T, H, E. Here the character “␣” represents a space between words. Line breaks and punctuation marks have been removed from the poem, and all letters are upper case, since we do not want to distinguish between lower case and upper case letters.\nThe R code shown below will compute and display the recurrence plot.\nlibrary(crqa)\n# We could create a package, NLM, instead\nsource(\"R/utils.R\")\n\nrp &lt;- crqa(popcorn, popcorn,\n           delay = 0,\n           embed = 0,\n           radius = 0.1,\n           method = \"rqa\",\n           datatype = \"categorical\")\n\nplot_rp(rp$RP)\n\n\n\n\nRecurrence plot of poem\nWe can also look at the first two verses of the poem, and put the letters on the axes, to make it a little easier to see how the underlying time series results in a recurrence plot.\nRecurrence plot of first two verses of the poem",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to recurrence plots</span>"
    ]
  },
  {
    "objectID": "intro.html#quantifying-the-recurrence-plot",
    "href": "intro.html#quantifying-the-recurrence-plot",
    "title": "1  Introduction to recurrence plots",
    "section": "1.2 Quantifying the recurrence plot",
    "text": "1.2 Quantifying the recurrence plot\nWith some training you can learn how to spot various properties of a time series simply by looking at the corresponding recurrence plot. In the case of the poem, we can see, for instance, that certain motifs are repeated in the poem. This is evident from the blue diagonal lines in the figure below, which correspond to the recurring motif “POP POP POPCORN”.\n\n\n\n\n\nRecurring motifs in the poem\n\n\n\n\nWhile we can gain some insights about the underlying time series from a visual inspection of the recurrence plot, we do not wish to rely on that. First, simply because we could overlook important features, and furthermore, it it not feasible for long time series or when comparing many time series. And, perhaps most importantly, we want objective measures, that do not depend on the skill of the person assessing the recurrence plot. With that said, it is still very useful to be able to visually inspect recurrence plots and infer something about the time series, so we definitely encourage you to work towards developing that skill as well.\nBut having objective quantitative measures that characterize features of a given recurrence plot is what has made recurrence plot analysis an effective tool, and that is why we will now look at recurrence quantification measures.\nSome of the most common recurrence quantification measures are reproduced in table Table 1.1, reproduced from Coco et al. (2021).\n\n\n\nTable 1.1: Common recurrence quantification measures\n\n\n\n\n\n\n\n\n\n\nMeasure\nAbbreviation\nDefinition\n\n\n\n\nRecurrence Rate\nRR\n\\(\\displaystyle \\frac{1}{N^2} \\sum_{i,j=1}^N R_{ij}\\)\n\n\nDeterminism\nDET\n\\(\\displaystyle \\left. \\sum_{l=l_\\mathrm{min}}^N lP(l) \\middle/ \\sum_{l=1}^N lP(l) \\right.\\)\n\n\nAverage Diagonal Line Length\nL\n\\(\\displaystyle \\left. \\sum_{l=l_\\mathrm{min}}^N lP(l) \\middle/ \\sum_{l=l_\\mathrm{min}}^N P(l) \\right.\\)\n\n\nMaximum Diagonal Line Length\nmaxL\n\\(\\displaystyle \\max(\\{l_i\\}_{i=1}^{N_l}), \\quad N_l = \\sum_{l\\geq l_\\mathrm{min}} P(l)\\)\n\n\nDiagonal Line Entropy\nENTR\n\\(\\displaystyle - \\sum_{l=l_\\mathrm{min}}^N p(l)\\log p(l)\\)\n\n\nLaminarity\nLAM\n\\(\\displaystyle \\left. \\sum_{v=v_\\mathrm{min}}^N vP(v) \\middle/ \\sum_{v=1}^N vP(v) \\right.\\)\n\n\nTrapping Time\nTT\n\\(\\displaystyle \\left. \\sum_{v=v_\\mathrm{min}}^N vP(v) \\middle/ \\sum_{v=v_\\mathrm{min}}^N P(v) \\right.\\)\n\n\nCategorical Area-based Entropy\ncatH\n\\(\\displaystyle - \\sum_{a&gt;1}^{N_a} p(a)\\log p(a)\\)\n\n\n\n\n\n\n\n\n\n\nCoco, Moreno I., Dan Mønster, Giuseppe Leonardi, Rick Dale, and Sebastian Wallot. 2021. “Unidimensional and Multidimensional Methods for Recurrence Quantification Analysis with Crqa.” The R Journal 13 (1): 145–63. https://doi.org/10.32614/RJ-2021-062.\n\n\nMarwan, Norbert, M. Carmen Romano, Marco Thiel, and Jürgen Kurths. 2007. “Recurrence Plots for the Analysis of Complex Systems.” Physics Reports 438 (56): 237–329. https://doi.org/10.1016/j.physrep.2006.11.001.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to recurrence plots</span>"
    ]
  },
  {
    "objectID": "interactive.html",
    "href": "interactive.html",
    "title": "2  Example of interactivity",
    "section": "",
    "text": "This is an interactive web page that needs to load a few things before it is ready, so please be patient. It runs R in your browser, so all computations happen on your own computer, not on a server. You do not need to have R installed. Once you see WebR Status above as “Ready!” you can begin to run code and see the output (if any). You will need to run the code cells in order, since later cells depend on variables and computations in earlier ones. You can also edit the cells and change the code — something you will have to do in order to finish some incomplete code.\nBelow, is a categorical time series assigned to the vector cat1. In this example you will plot the time series and perform a categorical recurrence quantification analysis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFirst, make a plot of the time series.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow we load a special version of the crqa package that can run in the browser. There may be a warning that it was compiled under a different version of R, which you can ignore.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow, perform a categorical recurrence analysis. Here, you will have to change some parameters in order to make it run correctly. These have been marked by comments in the code below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhen you have made the changes, you can execute the code below to show the recurrence plot.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Example of interactivity</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Coco, Moreno I., Dan Mønster, Giuseppe Leonardi, Rick Dale, and\nSebastian Wallot. 2021. “Unidimensional and Multidimensional\nMethods for Recurrence Quantification Analysis with\nCrqa.” The R Journal 13 (1): 145–63. https://doi.org/10.32614/RJ-2021-062.\n\n\nMarwan, Norbert, M. Carmen Romano, Marco Thiel, and Jürgen Kurths. 2007.\n“Recurrence Plots for the Analysis of Complex Systems.”\nPhysics Reports 438 (56): 237–329. https://doi.org/10.1016/j.physrep.2006.11.001.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "rqa.html",
    "href": "rqa.html",
    "title": "2  Recurrence Quantification Analysis",
    "section": "",
    "text": "Some text …\nAn inline equation can use LaTeX mathematics, e.g., \\(f(t) = t^2 e^-2t\\).\nIt is also possible to have display equations that take up a whole line: \\[\n  z_n = z_{n + 1}^2 + c.\n\\]\nConsider the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100.\nYou can easily sum these (stored in the variable numbers) using R:\n\nsummed_numbers &lt;- sum(numbers)\n\nIf you are curious, the sum is 5050, something the young Carl Friedrich Gauss, allegedly, solved in class as a young schoolboy.\nPlotting the sine of these numbers mapped to the interval \\([0, 2\\pi\\) is undoubtedly a much more daunting task to perform manually, but — again — we can ask R to do it for us:\n\nlibrary(ggplot2)\nggplot(data.frame(x = numbers * 2 * pi / 100),\n       aes(x = x)) +\n  geom_function(fun = sin) +\n  theme_classic()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Recurrence Quantification Analysis</span>"
    ]
  }
]